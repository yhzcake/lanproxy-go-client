name: Build OpenWrt Package

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  GO_VERSION: '1.21'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # MIPS 架构 - 大多数 OpenWrt 路由器使用
          - arch: mips
            goarch: mips
            gomips: softfloat
            target: mips_24kc
          - arch: mipsel  
            goarch: mipsle
            gomips: softfloat
            target: mipsel_24kc
          # ARM 架构 - 新一代路由器
          - arch: arm_cortex-a7
            goarch: arm
            goarm: "7"
            target: arm_cortex-a7
          - arch: arm_cortex-a9
            goarch: arm
            goarm: "7"
            target: arm_cortex-a9
          # ARM 64位架构
          - arch: aarch64_cortex-a53
            goarch: arm64
            target: aarch64_cortex-a53
          # IPQ60xx 系列 (Redmi AX5等)
          - arch: ipq60xx
            goarch: arm
            goarm: "7"
            target: ipq60xx
          # x86 架构 - 软路由
          - arch: x86_64
            goarch: amd64
            target: x86_64
          - arch: i386
            goarch: "386"
            target: i386_pentium-mmx

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Initialize Go module
      run: |
        if [ ! -f go.mod ]; then
          go mod init github.com/ffay/lanproxy-go-client
          go mod tidy
        fi

    - name: Build binary
      env:
        CGO_ENABLED: 0
        GOOS: linux
        GOARCH: ${{ matrix.goarch }}
        GOARM: ${{ matrix.goarm }}
        GOMIPS: ${{ matrix.gomips }}
      run: |
        VERSION=$(date -u +%Y%m%d)
        if [ "${{ github.ref_type }}" == "tag" ]; then
          VERSION=${{ github.ref_name }}
        fi
        
        LDFLAGS="-X main.VERSION=$VERSION -s -w"
        
        go build -ldflags "$LDFLAGS" -o lanproxy-client-${{ matrix.arch }} ./src/main
        
        # 压缩二进制文件 (可选)
        if command -v upx >/dev/null 2>&1; then
          upx -9 lanproxy-client-${{ matrix.arch }} || true
        fi

    - name: Create OpenWrt package structure
      run: |
        VERSION=$(date -u +%Y%m%d)
        if [ "${{ github.ref_type }}" == "tag" ]; then
          VERSION=${{ github.ref_name }}
        fi
        
        PKG_NAME="lanproxy-client"
        PKG_DIR="${PKG_NAME}_${VERSION}_${{ matrix.target }}"
        
        mkdir -p $PKG_DIR/usr/bin
        mkdir -p $PKG_DIR/etc/init.d
        mkdir -p $PKG_DIR/etc/config
        mkdir -p $PKG_DIR/CONTROL
        
        # 复制二进制文件
        cp lanproxy-client-${{ matrix.arch }} $PKG_DIR/usr/bin/lanproxy-client
        chmod +x $PKG_DIR/usr/bin/lanproxy-client
        
        # 创建控制文件
        cat > $PKG_DIR/CONTROL/control << EOF
        Package: $PKG_NAME
        Version: $VERSION
        Description: LanProxy Go client for OpenWrt - expose local server behind NAT
        Section: net
        Priority: optional
        Maintainer: LanProxy Team
        Architecture: ${{ matrix.target }}
        Depends: 
        Source: https://github.com/ffay/lanproxy-go-client
        EOF
        
        # 创建启动脚本
        cat > $PKG_DIR/etc/init.d/lanproxy << 'EOF'
        #!/bin/sh /etc/rc.common
        
        START=99
        STOP=10
        
        USE_PROCD=1
        PROG=/usr/bin/lanproxy-client
        
        start_service() {
            config_load lanproxy
            
            local enabled server_host server_port client_key enable_ssl ssl_cert
            config_get enabled main enabled 0
            config_get server_host main server_host
            config_get server_port main server_port 4900
            config_get client_key main client_key
            config_get enable_ssl main enable_ssl false
            config_get ssl_cert main ssl_cert
            
            [ "$enabled" = "1" ] || return 1
            [ -n "$server_host" ] || return 1
            [ -n "$client_key" ] || return 1
            
            procd_open_instance
            procd_set_param command $PROG
            procd_append_param command -s "$server_host"
            procd_append_param command -p "$server_port"
            procd_append_param command -k "$client_key"
            
            if [ "$enable_ssl" = "true" ]; then
                procd_append_param command -ssl true
                [ -n "$ssl_cert" ] && procd_append_param command -cer "$ssl_cert"
            fi
            
            procd_set_param respawn
            procd_set_param stdout 1
            procd_set_param stderr 1
            procd_close_instance
        }
        
        reload_service() {
            stop
            start
        }
        EOF
        chmod +x $PKG_DIR/etc/init.d/lanproxy
        
        # 创建配置文件
        cat > $PKG_DIR/etc/config/lanproxy << 'EOF'
        config lanproxy 'main'
            option enabled '0'
            option server_host ''
            option server_port '4900'
            option client_key ''
            option enable_ssl 'false'
            option ssl_cert ''
        EOF
        
        # 创建安装后脚本
        cat > $PKG_DIR/CONTROL/postinst << 'EOF'
        #!/bin/sh
        
        # 启用服务但不自动启动
        /etc/init.d/lanproxy enable
        
        echo "LanProxy client installed successfully!"
        echo "Please configure /etc/config/lanproxy and then start the service:"
        echo "  uci set lanproxy.main.enabled='1'"
        echo "  uci set lanproxy.main.server_host='your.server.com'"
        echo "  uci set lanproxy.main.client_key='your_client_key'"
        echo "  uci commit lanproxy"
        echo "  /etc/init.d/lanproxy start"
        EOF
        chmod +x $PKG_DIR/CONTROL/postinst
        
        # 创建卸载前脚本
        cat > $PKG_DIR/CONTROL/prerm << 'EOF'
        #!/bin/sh
        
        /etc/init.d/lanproxy stop
        /etc/init.d/lanproxy disable
        EOF
        chmod +x $PKG_DIR/CONTROL/prerm

    - name: Build IPK package
      run: |
        VERSION=$(date -u +%Y%m%d)
        if [ "${{ github.ref_type }}" == "tag" ]; then
          VERSION=${{ github.ref_name }}
        fi
        
        PKG_NAME="lanproxy-client"
        PKG_DIR="${PKG_NAME}_${VERSION}_${{ matrix.target }}"
        
        # 安装打包工具
        sudo apt-get update
        sudo apt-get install -y build-essential binutils-multiarch
        
        # 验证目录结构
        echo "Package directory structure:"
        find $PKG_DIR -type f -exec ls -la {} \;
        
        # 创建数据压缩包（排除 CONTROL 目录）
        cd $PKG_DIR
        find . -path ./CONTROL -prune -o -type f -print | tar --no-recursion -czf ../data.tar.gz -T -
        cd ..
        
        # 创建控制信息压缩包
        cd $PKG_DIR/CONTROL
        tar -czf ../../control.tar.gz .
        cd ../..
        
        # 创建 debian-binary 文件
        echo "2.0" > debian-binary
        
        # 验证文件存在
        echo "Files before packaging:"
        ls -la debian-binary control.tar.gz data.tar.gz
        
        # 创建 IPK 包
        ar r ${PKG_NAME}_${VERSION}_${{ matrix.target }}.ipk debian-binary control.tar.gz data.tar.gz
        
        # 验证 IPK 包
        echo "IPK package info:"
        ar t ${PKG_NAME}_${VERSION}_${{ matrix.target }}.ipk
        file ${PKG_NAME}_${VERSION}_${{ matrix.target }}.ipk
        
        # 清理临时文件
        rm -rf $PKG_DIR debian-binary control.tar.gz data.tar.gz

    - name: Calculate checksums
      run: |
        VERSION=$(date -u +%Y%m%d)
        if [ "${{ github.ref_type }}" == "tag" ]; then
          VERSION=${{ github.ref_name }}
        fi
        
        PKG_NAME="lanproxy-client"
        IPK_FILE="${PKG_NAME}_${VERSION}_${{ matrix.target }}.ipk"
        
        sha256sum $IPK_FILE > $IPK_FILE.sha256
        md5sum $IPK_FILE > $IPK_FILE.md5

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: lanproxy-client-${{ matrix.target }}
        path: |
          *.ipk
          *.sha256
          *.md5
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release files
      run: |
        mkdir -p release
        find artifacts -name "*.ipk" -exec cp {} release/ \;
        find artifacts -name "*.sha256" -exec cp {} release/ \;
        find artifacts -name "*.md5" -exec cp {} release/ \;
        
        # 创建发布说明
        cat > release/README.md << 'EOF'
        # LanProxy Go Client OpenWrt Packages
        
        ## Installation
        
        1. Download the appropriate IPK file for your router architecture
        2. Upload to your OpenWrt router:
           ```bash
           scp lanproxy-client_*.ipk root@192.168.1.1:/tmp/
           ```
        3. Install the package:
           ```bash
           opkg install /tmp/lanproxy-client_*.ipk
           ```
        
        ## Configuration
        
        Edit the configuration file:
        ```bash
        uci set lanproxy.main.enabled='1'
        uci set lanproxy.main.server_host='your.server.com'
        uci set lanproxy.main.client_key='your_client_key_here'
        uci commit lanproxy
        ```
        
        Start the service:
        ```bash
        /etc/init.d/lanproxy start
        /etc/init.d/lanproxy enable  # Enable auto-start on boot
        ```
        
        ## Architecture Support
        
        - **mips_24kc**: Most MIPS-based routers (Atheros, MediaTek, etc.)
        - **mipsel_24kc**: Little-endian MIPS routers
        - **arm_cortex-a7/a9**: ARM-based routers
        - **aarch64_cortex-a53**: 64-bit ARM routers
        - **x86_64**: Soft routers and PC-based OpenWrt
        - **i386**: Older x86-based devices
        
        ## Verification
        
        Verify the downloaded files using the provided checksums:
        ```bash
        sha256sum -c lanproxy-client_*.ipk.sha256
        md5sum -c lanproxy-client_*.ipk.md5
        ```
        EOF

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release/*
        body_path: release/README.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}