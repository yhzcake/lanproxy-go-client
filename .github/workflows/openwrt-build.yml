name: Build Release Packages

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  GO_VERSION: '1.21'

jobs:
  build-standard:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Initialize Go module
      run: |
        if [ ! -f go.mod ]; then
          go mod init github.com/ffay/lanproxy-go-client
          go mod tidy
        fi

    - name: Install build tools
      run: |
        sudo apt-get update
        sudo apt-get install -y upx-ucl

    - name: Run original build script
      run: |
        chmod +x build-release.sh
        ./build-release.sh

    - name: Upload standard artifacts
      uses: actions/upload-artifact@v4
      with:
        name: standard-packages
        path: |
          *.tar.gz
          client_*
        retention-days: 30

  build-openwrt:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: mips
            goos: linux
            goarch: mips
            gomips: softfloat
            target: mips_24kc
          - name: mipsel
            goos: linux
            goarch: mipsle
            gomips: softfloat
            target: mipsel_24kc
          - name: arm7
            goos: linux
            goarch: arm
            goarm: "7"
            target: arm_cortex-a7
          - name: ipq60xx
            goos: linux
            goarch: arm
            goarm: "7"
            target: ipq60xx

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Initialize Go module
      run: |
        if [ ! -f go.mod ]; then
          go mod init github.com/ffay/lanproxy-go-client
          go mod tidy
        fi

    - name: Build binary
      env:
        CGO_ENABLED: 0
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        GOARM: ${{ matrix.goarm }}
        GOMIPS: ${{ matrix.gomips }}
      run: |
        VERSION=$(date -u +%Y%m%d)
        if [ "${{ github.ref_type }}" == "tag" ]; then
          VERSION=${{ github.ref_name }}
        fi
        
        LDFLAGS="-X main.VERSION=$VERSION -s -w"
        OUTPUT_NAME="client_linux_${{ matrix.name }}"
        
        go build -ldflags "$LDFLAGS" -o $OUTPUT_NAME ./src/main
        
        if command -v upx >/dev/null 2>&1; then
          upx -9 $OUTPUT_NAME || true
        fi

    - name: Create package
      run: |
        VERSION=$(date -u +%Y%m%d)
        if [ "${{ github.ref_type }}" == "tag" ]; then
          VERSION=${{ github.ref_name }}
        fi
        
        BINARY_NAME="client_linux_${{ matrix.name }}"
        PACKAGE_NAME="lanproxy-client-${{ matrix.target }}-$VERSION"
        
        mkdir -p $PACKAGE_NAME/usr/bin
        mkdir -p $PACKAGE_NAME/etc/init.d
        
        cp $BINARY_NAME $PACKAGE_NAME/usr/bin/lanproxy-client
        
        echo '#!/bin/sh /etc/rc.common' > $PACKAGE_NAME/etc/init.d/lanproxy
        echo 'START=99' >> $PACKAGE_NAME/etc/init.d/lanproxy
        echo 'STOP=10' >> $PACKAGE_NAME/etc/init.d/lanproxy
        echo 'PROG=/usr/bin/lanproxy-client' >> $PACKAGE_NAME/etc/init.d/lanproxy
        echo '' >> $PACKAGE_NAME/etc/init.d/lanproxy
        echo 'start() {' >> $PACKAGE_NAME/etc/init.d/lanproxy
        echo '    start-stop-daemon -S -q -p /var/run/lanproxy.pid -m -b -x $PROG -- -s "$SERVER_HOST" -p "$SERVER_PORT" -k "$CLIENT_KEY"' >> $PACKAGE_NAME/etc/init.d/lanproxy
        echo '}' >> $PACKAGE_NAME/etc/init.d/lanproxy
        echo '' >> $PACKAGE_NAME/etc/init.d/lanproxy
        echo 'stop() {' >> $PACKAGE_NAME/etc/init.d/lanproxy
        echo '    start-stop-daemon -K -q -p /var/run/lanproxy.pid' >> $PACKAGE_NAME/etc/init.d/lanproxy
        echo '    rm -f /var/run/lanproxy.pid' >> $PACKAGE_NAME/etc/init.d/lanproxy
        echo '}' >> $PACKAGE_NAME/etc/init.d/lanproxy
        
        chmod +x $PACKAGE_NAME/etc/init.d/lanproxy
        
        tar -czf $PACKAGE_NAME.tar.gz $PACKAGE_NAME/
        sha256sum $PACKAGE_NAME.tar.gz > $PACKAGE_NAME.tar.gz.sha256
        md5sum $PACKAGE_NAME.tar.gz > $PACKAGE_NAME.tar.gz.md5

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: openwrt-${{ matrix.target }}
        path: |
          *.tar.gz
          *.sha256
          *.md5
          client_linux_*
        retention-days: 30

  release:
    needs: [build-standard, build-openwrt]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release
      run: |
        mkdir -p release
        find artifacts -type f \( -name "*.tar.gz" -o -name "*.sha256" -o -name "*.md5" -o -name "client_*" \) -exec cp {} release/ \;
        
        echo '# LanProxy Go Client Release' > release/README.md
        echo '' >> release/README.md
        echo '## 标准发布包' >> release/README.md
        echo '- lanproxy-client-*-*.tar.gz - 使用原始 build-release.sh 的构建结果' >> release/README.md
        echo '- client_* - 直接可执行的二进制文件' >> release/README.md
        echo '' >> release/README.md
        echo '## OpenWrt 专用包' >> release/README.md
        echo '- lanproxy-client-*-*.tar.gz - 适用于 OpenWrt 路由器的包' >> release/README.md
        echo '' >> release/README.md
        echo '## 使用方法' >> release/README.md
        echo '' >> release/README.md
        echo '### 标准平台' >> release/README.md
        echo '```bash' >> release/README.md
        echo 'tar -xzf lanproxy-client-*.tar.gz' >> release/README.md
        echo './client_* -s SERVER_IP -p SERVER_PORT -k CLIENT_KEY' >> release/README.md
        echo '```' >> release/README.md
        echo '' >> release/README.md
        echo '### OpenWrt 路由器' >> release/README.md
        echo '```bash' >> release/README.md
        echo 'scp client_linux_* root@192.168.1.1:/usr/bin/lanproxy-client' >> release/README.md
        echo 'ssh root@192.168.1.1 "chmod +x /usr/bin/lanproxy-client"' >> release/README.md
        echo 'ssh root@192.168.1.1 "/usr/bin/lanproxy-client -s SERVER_IP -p 4900 -k CLIENT_KEY"' >> release/README.md
        echo '```' >> release/README.md
        echo '' >> release/README.md
        echo '## 架构说明' >> release/README.md
        echo '- mips_24kc - MIPS 路由器' >> release/README.md
        echo '- mipsel_24kc - Little-endian MIPS 路由器' >> release/README.md
        echo '- arm_cortex-a7 - ARM 路由器' >> release/README.md
        echo '- ipq60xx - Redmi AX5 等设备' >> release/README.md

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release/*
        body_path: release/README.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}